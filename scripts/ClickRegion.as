package tbigame.scripts{	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.Shape;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.*;		public class ClickRegion extends MovieClip	{		private var my_button:SimpleButton;		private var outline;		private var myStage;		private var myShadow:DropShadowFilter;		private var maxY = 530;		private var myTimer = null;		var ax;		var ay;		var awidth;		var aheight;		function ClickRegion(stage, x=-1, y=-1, width=-1, height=-1, fun = null, options=undefined)		{			if(typeof(options) === "object"){				if(typeof(options.x) === "number"){					x = options.x;				}				if(typeof(options.y) === "number"){					y = options.y;				}				if(typeof(options.width) === "number"){					width = options.width;				}				if(typeof(options.height) === "number"){					height = options.height;				}				if(typeof(options.fun) === "function"){					fun = options.fun;				}				if(typeof(options.endX) === "number"){					width = options.endX - x;				}				if(typeof(options.endY) === "number"){					height = options.endY - y;				}							}						if(y+height>maxY){				height = maxY - y;			}			ax = x;			ay = y;			awidth = width;			aheight = height;						if(fun == null){				fun = function(){};			}			my_button=new SimpleButton();			my_button.x=x;			my_button.y=y;						/*outline  = new Canvas();						outline.x=x;			outline.y=y;						outline.width = width;			outline.height = height;						outline.graphics.beginFill(0xFF0000, 1);			outline.graphics.drawRect(0, 0, width, height);			//outline.graphics.drawRect(width, height, 1, 1);			/*			outline.graphics.drawRect(x, y+height-1, 19, 19);			outline.graphics.drawRect(width+x-1, y, 1, 1);			outline.graphics.drawRect(x, y, 1, 1);			outline.graphics.drawRect(width+x-1, height+y-1, 1, 1);			*/						//msgBox.height=420+30;			//msgBox.width=(nextPos-y)+30;					//outline.graphics.endFill();						//my_button.upState=drawArea(x, y, width, height);			my_button.hitTestState=drawArea(x, y, width, height);						my_button.addEventListener(MouseEvent.CLICK,fun);			var that = this;			my_button.addEventListener(MouseEvent.MOUSE_DOWN,function(evt){that.dispatchEvent(evt)});			my_button.addEventListener(MouseEvent.MOUSE_UP,function(evt){that.dispatchEvent(evt)});									myStage = stage;			//myStage.addChild(outline);			myStage.addChild(my_button);			if(typeof(options) === "object" && options.showOutline === true){				createHighlight();			}					}						private function drawArea(x, y, width, height):Shape		{			var cerchio:Shape=new Shape();			cerchio.graphics.beginFill(0x000000,1);			cerchio.graphics.drawRect(0,0,width, height);			cerchio.graphics.endFill();			return(cerchio);		}				public function createHighlight(time=3000, repeat=0){			outline = drawArea(ax, ay, awidth+10, aheight);			outline.x = ax-10;			outline.y = ay;			outline.alpha = 0;						var myBevel:BevelFilter = new BevelFilter();			myBevel.type = BitmapFilterType.OUTER;			myBevel.distance = 10;			myBevel.highlightColor = 0xFFFF00;			myBevel.shadowColor = 0xFFFF00;			myBevel.blurX = 15;			myBevel.blurY = 15;			myBevel.knockout = true;						outline.filters = [myBevel];			myStage.addChild(outline);			trace("setting up timer");			myTimer = timer(time, function(){				trace("time firing");				 createTween(outline, "alpha", Regular.easeInOut, 1, -1, 50, function(){					createTween(outline, "alpha", Regular.easeInOut, 0, -1, 50);				});			}, repeat, true, function(){				trace("removing timer");				myStage.removeChild(outline);				myTimer = null;			});		}		public function remove(){			myStage.removeChild(my_button)			if(myTimer !== null){				trace(myTimer);				myTimer.stop();				myTimer.dispatchEvent(new TimerEvent(TimerEvent.TIMER_COMPLETE));				myTimer = null;			}		}				//createTween(stack, "height", None.easeInOut, newHeight, -1, time);				import fl.transitions.Tween;		import fl.transitions.easing.*;		import fl.transitions.TweenEvent;		function createTween(obj:Object, prop:String, type, endVal, startVal = -1, numFrames = 10, callBack:Function = null, useTime:Boolean = false):Tween{			if(startVal == -1){				startVal = obj[prop];			}						var tempTween:Tween = new Tween(obj, prop, type, startVal, endVal, numFrames, useTime);			tempTween.addEventListener(TweenEvent.MOTION_FINISH, tweenEnd);						function tweenEnd(e:TweenEvent):void{				tempTween.removeEventListener(TweenEvent.MOTION_FINISH, tweenEnd);				obj[prop] = endVal;				if(callBack!=null)					callBack(e);				tempTween = null;				obj = null;				callBack = null;			}						return tempTween;		}				import flash.utils.Timer;		import flash.events.TimerEvent;		import flash.events.Event;		/**		  *@brief sets a timeout listener		  *@param milliseconds - time until timer goes off		  *@param callback - function that's triggered after milliseconds		  *@param repitions - (default: 1) number of times to repeat timeout		  *@param useTime - doesn't do anything		*/		function timer(milliseconds:int, callback:Function, repititions:int = 1, useTime:Boolean = true, completeFun:Function = null){						var timer:Timer = new Timer(milliseconds, repititions);			timer.addEventListener(TimerEvent.TIMER, function(e:TimerEvent){ callback(); });			if(completeFun){				timer.addEventListener(TimerEvent.TIMER_COMPLETE, function(e:TimerEvent){ completeFun(); });			}			timer.start();			return timer;		}	}}