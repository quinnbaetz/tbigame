package tbigame.scripts {	import flash.display.MovieClip;	import flash.display.MovieClip;	import fl.transitions.Tween;	import fl.transitions.easing.*;	import fl.transitions.TweenEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.utils.getDefinitionByName;	import flash.events.MouseEvent;	import flash.ui.Keyboard;	import flash.events.KeyboardEvent;	import flash.external.ExternalInterface;	import flash.events.TimerEvent;	import flash.utils.Timer;		public class TabletLogic extends MovieClip{				/*****************************************		************    CONSTANTS     ************		******************************************		*/				private var glossary = {}						/************************		**************************************		***************************************************************		************************************************************************************************		*/				//CLASS VARS		//public var tabletContent;		public var theStage;		public var scope;		private var padX = -105;		private var padY = 420;		private var padRot = 30;		private var scale = .4;		public var pad;		public var inToolbox;				//Eventually taken as a param? Some way to differentiate..		private var classVersion:Boolean = false;				//FLAGS		private var ctReportIsOn:Boolean = false;				//CT-Report Array, index inputs --		//Indexes strings by diagnosis, then location, then summary		//top down, left to right		public var ctReportArr:Array;		//Store the string for second CT page separately.		public var ctRecommendStr:String;				private var ctrIndexMem:Array;		private var ctCallback:Function;		private var errCall:Function;		//---				public function TabletLogic(theStage, scope, myToolbox) {			this.theStage = theStage;			this.scope = scope;						ctReportArr = new Array();			ctrIndexMem = new Array(8);						//set parameters for tablet			this.pad = new Tablet();			this.pad.x = padX;			this.pad.y = padY;			this.pad.scaleX = scale;			this.pad.scaleY = scale;			this.pad.rotation = padRot;									//hide unused buttons			this.pad.EMTnoteButton.visible = false;			this.pad.CTscanNoteButton.visible = false;			this.pad.SurgeryNoteButton.visible = false;						this.pad.AdmissionReportButton.visible = false;			this.pad.CTreportButton.visible = false;			this.pad.SurgeryReportButton.visible = false;						this.pad.ProgressButton.visible = false;									//tabletContent is embedded within the tablet movieClip now			this.scope.addCache(this.pad, this.theStage);			this.pad.tabletContent.gotoAndStop("defaultScreen");			this.pad.SearchInput.addEventListener(MouseEvent.CLICK, prepSearch);			this.inToolbox = myToolbox;			sideMenuListeners();						//set up glossary definitions			var terms = scope._('glossary terms');			for(var i in terms){				glossary[terms[i]] = scope._(terms[i]+" entry");				trace(terms[i] + " " + glossary[terms[i]]);			}								}				//public wrapper for the actual toggle function		public function padToggle(evt, forceOpen = false, forceClose = false) {			tabletToggle(evt, forceOpen, forceClose);		}				/**		* Hides tablet from view		*/		public function hide(){			this.pad.buttonMode = false;			this.pad.useHandCursor = false;			this.pad.alpha = 0;		}		/**		* Shows tablet		*/		public function show(){			this.pad.buttonMode = true;			this.pad.useHandCursor = true;			this.pad.alpha = 1;		}				//This will toggle the availability of CT Report scene		public function toggleCtReport(callback:Function, errorCallback:Function):void {			if(ctReportIsOn){				ctReportIsOn = false;			}			else {				ctReportIsOn = true;			}			ctCallback = callback;			errCall = errorCallback;		}				/**		* Takes the user input from CT Report and stores it in the array for retrieval later..		* 		* Does not guarantee summary is non-null!		*/		private function CTR1toArr():Boolean {			//update everytime user goes back and forth between recommendation			if(ctReportArr.length != 0){				ctReportArr = new Array();				ctrIndexMem = new Array(8);			}						//******* began retrieving from the user input ****************//						//DIAGNOSIS			if(this.pad.tabletContent.normal.selected) {				ctReportArr.push(this.pad.tabletContent.normal.label);			}			if(this.pad.tabletContent.concussion.selected) {				ctReportArr.push(this.pad.tabletContent.concussion.label);			}			if(this.pad.tabletContent.diffuseAxonalInjury.selected) {				ctReportArr.push(this.pad.tabletContent.diffuseAxonalInjury.label);			}			if(this.pad.tabletContent.massTumor.selected) {				ctReportArr.push(this.pad.tabletContent.massTumor.label);			}			if(this.pad.tabletContent.foreignObject.selected) {				ctReportArr.push(this.pad.tabletContent.foreignObject.label);			}			if(this.pad.tabletContent.hematoma.selected) {				ctReportArr.push(this.pad.tabletContent.hematoma.label);			}			if(this.pad.tabletContent.subdural.selected) {				ctReportArr.push(this.pad.tabletContent.subdural.label);			}			if(this.pad.tabletContent.epidural.selected) {				ctReportArr.push(this.pad.tabletContent.epidural.label);			}						//LOCATION			if(this.pad.tabletContent.leftS.selected) {				ctReportArr.push(this.pad.tabletContent.leftS.label);			}			if(this.pad.tabletContent.rightS.selected) {				ctReportArr.push(this.pad.tabletContent.rightS.label);			}			if(this.pad.tabletContent.frontal.selected) {				ctReportArr.push(this.pad.tabletContent.frontal.label);			}			if(this.pad.tabletContent.temporal.selected) {				ctReportArr.push(this.pad.tabletContent.temporal.label);			}			if(this.pad.tabletContent.parietal.selected) {				ctReportArr.push(this.pad.tabletContent.parietal.label);			}			if(this.pad.tabletContent.occipital.selected) {				ctReportArr.push(this.pad.tabletContent.occipital.label);			}						//SUMMARY						if(this.pad.tabletContent.blood.selectedItem != null) {				ctReportArr.push(this.pad.tabletContent.blood.selectedItem.data);				//ctrIndexMem[0] = this.pad.tabletContent.blood.selectedIndex;			} else { return false; }						if(this.pad.tabletContent.rightCB.selectedItem != null) {				ctReportArr.push(this.pad.tabletContent.rightCB.selectedItem.data);				//ctrIndexMem[1] = this.pad.tabletContent.rightCB.selectedIndex;			} else { return false; }						if(this.pad.tabletContent.hematomaCB.selectedItem != null) {				ctReportArr.push(this.pad.tabletContent.hematomaCB.selectedItem.data);				//ctrIndexMem[2] = this.pad.tabletContent.hematomaCB.selectedIndex;			} else { return false; }						if(this.pad.tabletContent.temporalCB.selectedItem != null) {				ctReportArr.push(this.pad.tabletContent.temporalCB.selectedItem.data);				//ctrIndexMem[3] = this.pad.tabletContent.temporalCB.selectedIndex;			} else { return false; }						if(this.pad.tabletContent.crescent.selectedItem != null) {				ctReportArr.push(this.pad.tabletContent.crescent.selectedItem.data);				//ctrIndexMem[4] = this.pad.tabletContent.crescent.selectedIndex;			} else { return false; }						if(this.pad.tabletContent.subduralCB.selectedItem != null) {				ctReportArr.push(this.pad.tabletContent.subduralCB.selectedItem.data);				//ctrIndexMem[5] = this.pad.tabletContent.subduralCB.selectedIndex;			} else { return false; }						if(this.pad.tabletContent.brain.selectedItem != null) {				ctReportArr.push(this.pad.tabletContent.brain.selectedItem.data);				//ctrIndexMem[6] = this.pad.tabletContent.brain.selectedIndex;			} else { return false; }						if(this.pad.tabletContent.brain2.selectedItem != null) {				ctReportArr.push(this.pad.tabletContent.brain2.selectedItem.data);				//ctrIndexMem[7] = this.pad.tabletContent.brain2.selectedIndex;			} else { return false; }						return true;		}				private function CTR2toArr():void {			//two cases, one for in class use.			if(!classVersion){				ctRecommendStr = this.pad.tabletContent.CERformprefilled.text;			} else {				ctRecommendStr = this.pad.tabletContent.CERform.text;			}					}				//adds one listener for now  -- 		//todo: will eventually add listeners to the whole side menu		private function sideMenuListeners():void {			this.pad.CTreportButton.addEventListener(MouseEvent.MOUSE_DOWN, toCTReport);		}				//necessary for managing the Glossary		//todo: delete old code?? not sure if need... I hoarde old code.		private function addSearchEvtListeners() {			//listens for user click on search button			hideResults();			//don't call hideResults after addLinkLiseners()... or make sure the gotoandstop is called earlier						//trace(this.pad.SearchInput);			this.pad.SearchInput.addEventListener(KeyboardEvent.KEY_DOWN, termSearch);			//reset focus			this.pad.SearchInput.stage.focus = this.pad.SearchInput;			this.pad.SearchInput.setSelection(0,0);			//this.pad.tabletContent.SearchButton.addEventListener(MouseEvent.CLICK, termSearch);			//re-add the listeners after each frame change.			sideMenuListeners();		}				private function prepSearch(event: MouseEvent):void {			addSearchEvtListeners();		}				/* triggered when clicked on search. We take the entered string and see if it is a substring from the list of		 * valid entries		 */		private function termSearch(event: KeyboardEvent) {			displayQueryResult(this.pad.SearchInput.text);		}				/**		* Adds event listeners to each "link" on the tablet, for click time.		*/		private function addLinkListeners(){			this.pad.tabletContent.EMT.addEventListener(MouseEvent.CLICK, displayDescription);			this.pad.tabletContent.Penlight.addEventListener(MouseEvent.CLICK, displayDescription);			this.pad.tabletContent.Stethoscope.addEventListener(MouseEvent.CLICK, displayDescription);			this.pad.tabletContent.EarTherm.addEventListener(MouseEvent.CLICK, displayDescription);			this.pad.tabletContent.BPCuff.addEventListener(MouseEvent.CLICK, displayDescription);			this.pad.tabletContent.Gauze.addEventListener(MouseEvent.CLICK, displayDescription);			this.pad.tabletContent.GCS.addEventListener(MouseEvent.CLICK, displayDescription);			this.pad.tabletContent.MedevacHeli.addEventListener(MouseEvent.CLICK, displayDescription);					}				/**		* Hides all elements of searchList		*/		private function hideResults():void {			this.pad.tabletContent.gotoAndStop("searchList");			//A good place in code to see the strange instance names!			this.pad.tabletContent.EMT.alpha = 0;			this.pad.tabletContent.Penlight.alpha = 0;			this.pad.tabletContent.Stethoscope.alpha = 0;			this.pad.tabletContent.EarTherm.alpha = 0;			this.pad.tabletContent.BPCuff.alpha = 0;			this.pad.tabletContent.Gauze.alpha = 0;			this.pad.tabletContent.GCS.alpha = 0;			this.pad.tabletContent.MedevacHeli.alpha = 0;		}				/*		* Opposite of hideResults		*/		private function displayAll():void {			this.pad.tabletContent.EMT.alpha = 1;			this.pad.tabletContent.Penlight.alpha = 1;			this.pad.tabletContent.Stethoscope.alpha = 1;			this.pad.tabletContent.EarTherm.alpha = 1;			this.pad.tabletContent.BPCuff.alpha = 1;			this.pad.tabletContent.Gauze.alpha = 1;			this.pad.tabletContent.GCS.alpha = 1;			this.pad.tabletContent.MedevacHeli.alpha = 1;			addLinkListeners();		}				/**		* Uses indexOf to check for subStrings. hideResults will first set		* all elements invisible, and if indexOf spots match it will reveal it.		*/		private function displayQueryResult(queryStr:String):void {			hideResults();			var numFound:int = 0;			queryStr = queryStr.toLowerCase();			trace("string of query is: " + queryStr);						var foundStr:String = "emergency medical technician";			//began the great if statement sequence			if(foundStr.indexOf(queryStr) >= 0 ){				//EXAMPLE IF *** ALL ARE THE SAME BEYOND				//Set alpha to opaque				this.pad.tabletContent.EMT.alpha = 1;				//numFound will "crunch" the found search terms into a nice order from sart point -97				this.pad.tabletContent.EMT.y = -97 + numFound*24;				//if we've found it, then iterate numFound for next possible if				numFound++;				this.pad.tabletContent.EMT.addEventListener(MouseEvent.CLICK, displayDescription);			}			foundStr = "penlight";			if(foundStr.indexOf(queryStr) >= 0 ) {				this.pad.tabletContent.Penlight.alpha = 1;				this.pad.tabletContent.Penlight.y = -97 + numFound*24;				numFound++;				this.pad.tabletContent.Penlight.addEventListener(MouseEvent.CLICK, displayDescription);			}			foundStr = "stethoscope";			if(foundStr.indexOf(queryStr) >= 0 ) {				this.pad.tabletContent.Stethoscope.alpha = 1;				this.pad.tabletContent.Stethoscope.y = -97 + numFound*24;				numFound++;				this.pad.tabletContent.Stethoscope.addEventListener(MouseEvent.CLICK, displayDescription);			}			foundStr = "ear thermometer";			if(foundStr.indexOf(queryStr) >= 0 ) {				this.pad.tabletContent.EarTherm.alpha = 1;				this.pad.tabletContent.EarTherm.y = -97 + numFound*24;				numFound++;				this.pad.tabletContent.EarTherm.addEventListener(MouseEvent.CLICK, displayDescription);			}			foundStr = "blood pressure cuff";			if(foundStr.indexOf(queryStr) >= 0 ) {				this.pad.tabletContent.BPCuff.alpha = 1;				this.pad.tabletContent.BPCuff.y = -97 + numFound*24;				numFound++;				this.pad.tabletContent.BPCuff.addEventListener(MouseEvent.CLICK, displayDescription);			}			foundStr = "gauze";			if(foundStr.indexOf(queryStr) >= 0){				this.pad.tabletContent.Gauze.alpha = 1;  				this.pad.tabletContent.Gauze.y = -97 + numFound*24;				numFound++;				this.pad.tabletContent.Gauze.addEventListener(MouseEvent.CLICK, displayDescription);			}			foundStr = "glasgow coma scale";			if(foundStr.indexOf(queryStr) >= 0 ) {				this.pad.tabletContent.GCS.alpha = 1;				this.pad.tabletContent.GCS.y = -97 + numFound*24;				numFound++;				this.pad.tabletContent.GCS.addEventListener(MouseEvent.CLICK, displayDescription);			}			foundStr = "medevac helicopter";			if(foundStr.indexOf(queryStr) >= 0 ) {				this.pad.tabletContent.MedevacHeli.alpha = 1;				this.pad.tabletContent.MedevacHeli.y = -97 + numFound*24;				numFound++;				this.pad.tabletContent.MedevacHeli.addEventListener(MouseEvent.CLICK, displayDescription);			}			if(numFound == 0) {				displayAll();			}			this.pad.SearchInput.text = "";		}				private function tabletToggle(evt, forceOpen = false, forceClose = false): void {			trace("here");			inToolbox.bringForward();						if((pad.x<-50 || forceOpen) && !forceClose){				trace("opening");				this.inToolbox.hideMenu();				this.scope.createTween(pad, "x", None.easeInOut, 20);				this.scope.createTween(pad, "y", None.easeInOut, 5);				this.scope.createTween(pad, "scaleX", None.easeInOut, 1);				this.scope.createTween(pad, "scaleY", None.easeInOut, 1);				this.scope.createTween(pad, "rotation", None.easeInOut, 0, -1, 10, function(){					//ExternalInterface.call("showTabletContent");				});				return;			}			if(pad.x>=-50 || forceClose){				trace("closing");				var myTimer:Timer = new Timer(250, 1);				myTimer.start();				var scope = this.scope;				myTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function(){					myTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, arguments.callee);					myTimer = null;					scope.createTween(pad, "x", None.easeInOut, padX);					scope.createTween(pad, "y", None.easeInOut, padY);					scope.createTween(pad, "scaleX", None.easeNone, scale);					scope.createTween(pad, "scaleY", None.easeNone, scale);					scope.createTween(pad, "rotation", None.easeInOut, padRot);				 });				 //ExternalInterface.call("hideTabletContent");			} 		}//end toggle function				//when a user clicks a link from search, this is where it goes..		private function displayDescription(event:MouseEvent):void {						this.pad.tabletContent.gotoAndStop("descriptionField");			sideMenuListeners();			this.pad.tabletContent.ReturnSearchButton.addEventListener(MouseEvent.CLICK, returnSearchButt);						trace('firing displayDescription ' + event.currentTarget.name);						//we switch on the link's instance name, constants defined at top			switch (event.currentTarget.name) {				/*case "EMT": 					pad.tabletContent.DescriptionField.text = EMT;					break;				case "Penlight":					pad.tabletContent.DescriptionField.text = PENLIGHT;					break;				case "Stethoscope":					pad.tabletContent.DescriptionField.text = STETHOSCOPE;					break;				case "EarTherm":					pad.tabletContent.DescriptionField.text = EARTHERM;					break;				case "BPCuff":					pad.tabletContent.DescriptionField.text = BPCUFF;					break;				case "Gauze":					pad.tabletContent.DescriptionField.text = GAUZE;					break;				case "GCS":					pad.tabletContent.DescriptionField.text = GCS;					break;				case "MedevacHeli":					pad.tabletContent.DescriptionField.text = MEDEVACHELI;					break;*/			}// end switch statement						trace(pad.tabletContent.DescriptionField.text);		}						private function returnSearchButt(event: MouseEvent):void {			trace('firing mouse');			this.pad.tabletContent.ReturnSearchButton.removeEventListener(MouseEvent.CLICK, returnSearchButt);			this.pad.tabletContent.gotoAndStop("defaultScreen");			this.pad.SearchInput.addEventListener(MouseEvent.CLICK, prepSearch);			sideMenuListeners();		}				private function refreshReportEntries():void {						this.pad.tabletContent.blood.selectedIndex = ctrIndexMem[0];						this.pad.tabletContent.rightCB.selectedIndex = ctrIndexMem[1];						this.pad.tabletContent.hematomaCB.selectedIndex = ctrIndexMem[2];						this.pad.tabletContent.temporalCB.selectedIndex = ctrIndexMem[3];						this.pad.tabletContent.crescent.selectedIndex = ctrIndexMem[4];						this.pad.tabletContent.subduralCB.selectedIndex = ctrIndexMem[5];						this.pad.tabletContent.brain.selectedIndex = ctrIndexMem[6];						this.pad.tabletContent.brain2.selectedIndex = ctrIndexMem[7];					}				//Listener for CT Report button		private function toCTReport(event:MouseEvent):void {			if(ctReportArr.length != 0){				//refreshReportEntries();				//Not sure why I'm getting access of null object ref in this function			}			if(ctReportIsOn) {			this.pad.tabletContent.gotoAndStop("CT_Scan_Report_1");			this.pad.tabletContent.NextPage.addEventListener(MouseEvent.CLICK, nextPageCTR);			this.pad.SearchInput.addEventListener(MouseEvent.CLICK, prepSearch);			}		}				private function submitReport(event:MouseEvent):void {			CTR2toArr();						//TODO: How to escape and move on? Not immediatelys sure..			ctCallback();		}				private function nextPageCTR(event:MouseEvent):void {						//store into our array			var formIsFilled:Boolean = CTR1toArr();						if(!formIsFilled) {				errCall();				return;			}						//two cases, one for in class use.			if(!classVersion){				this.pad.tabletContent.gotoAndStop("CT_Scan_Report_2");				this.pad.tabletContent.CTreportSubmit2.addEventListener(MouseEvent.CLICK, submitReport);			} else {				this.pad.tabletContent.gotoAndStop("CT_Scan_Report_2class");				this.pad.tabletContent.CTreportSubmit3.addEventListener(MouseEvent.CLICK, submitReport);			}						this.pad.SearchInput.addEventListener(MouseEvent.CLICK, prepSearch);						//we need to get back!			this.pad.tabletContent.previousPage.addEventListener(MouseEvent.CLICK, toCTReport);		}			}	}