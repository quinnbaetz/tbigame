import flash.geom.Point;import flash.display.MovieClip;import tbigame.scripts.Message;var createPopupBox = function(){	var pbox:MovieClip = new popupBox();	pbox.x = WIDTH/2-pbox.width/2;	pbox.y = HEIGHT/2-pbox.height/2;	pbox.gotoAndStop(0);	stage.addChild(pbox);	return pbox}var loadImageAnimation = function(pbox, callback){	pbox.gotoAndStop(2);	var tween = null;	var delayTimer = null;	var pbar = pbox.getChildByName("scanProgress");	pbar = pbox.scanProgress;	var tempFun = function(){		if(delayTimer !== null){			delayTimer.stop();			delayTimer.dispatchEvent(new TimerEvent(TimerEvent.TIMER));			delayTimer = null;		}else{			tween.fforward();		}	}	delayTimer = timer(500, function(){		delayTimer = null;		tween = createTween(pbar, "width", None.easeInOut, 271, -1, 50, function(){			delayTimer = timer(500, function(){				trace("scan done");				stage.removeEventListener(MouseEvent.CLICK, tempFun);				stage.removeChild(pbox);				callback();			});		});	});	stage.addEventListener(MouseEvent.CLICK, tempFun);							}var doctorDialogIntro = function(callbacks, callback){		var messages = new Array("I’ll start with a quick introduction to our imaging system.",							 "A Computerized Tomography (or “CT”) scan is an x-ray that allows us to create an image of a patient’s brain.",							 "We will take images from a series of horizontal ‘slices’ through the head. The view is from the bottom up,",							 "so remember that the structures on the LEFT side of the CT scan are actually on the RIGHT side of the patient.",							 "In the CT scan image, can you click the part that represents the RIGHT hemisphere of the patient’s brain?"); 	return callbackMessages(messages, null, null, callbacks, callback, {'hideClose' : true}, "CTTech");		}var doctorDialogAdvanceOption = function(progressCallback){		var messages = new Array("The CT scans will appear on the right and illustrations of a brain will appear on the left.",							 "Click “Begin” to get started.");							 	return callbackMessages(messages, null, null, progressCallback, null, {'hideClose' : true}, "CTTech");		}var doctorDialogReview = function(callback){	var messages = new Array("Move your mouse over the parts you need to review.","Click when you are ready to take the quiz");							 	displayMessages(messages, null, null, callback, false, "CTTech");	};var doctorDialogTest = function(callback){	var messages = new Array("Ok, match the terms that appear below with the brain region on the CT image.",							 "Move your mouse over the scan to see the regions you select, then click the region you think matches the term to mark your answer.");	displayMessages(messages, null, null, callback, false, "CTTech");	};var names = [{id: "frontalLobe", name: "Frontal Lobe", desc : "Among the many functions are executive functions such as attention, short-term memory tasks, planning, and drive. The region appears gray on the CT image as the tissue of the brain is less dense than bone."},				{id: "temporalLobe", name: "Temporal Lobe", desc : "Functions include the processing of hearing, language and senses such as temperature, taste, and long term memory."},				{id: "occipitalLobe", name: "Occipital Lobe", desc : "The center of our visual perception system. This region receives visual signals to identify stationary and moving objects and recognize patterns."},				{id: "skull", name: "Skull", desc : "Made up of the bones of the braincase and face, the framework of the head appears almost white on a CT scan due to the high density of bone."},				{id: "cerrebellum", name: "Cerebellum", desc : "Crucial in motor control, this region is responsible for coordination, precision and timing of motor activity. Its visibility on a CT scan will vary based on where in the brain the image was taken."},				{id: "lateralVentrical", name: "Lateral Ventricle", desc : "Appearing black on a CT scan, they provide a pathway for the circulation of the cerebrospinal fluid, protecting the head from trauma."},				{id: "thalamus", name: "Thalamus", desc : "Sensory relay station for the brain. It receives sensory information from all over the body. Slight changes in density can make the structure visible on a CT scan from surrounding brain tissue."}]		var doctorDialogRefresherQuiz = function(progressCallback, callback){	var messages = new Array("Take your time examining the appearance of each landmark in both the CT scan and the illustrated image.");	for(var i in names){		messages.push(names[i].desc);	}	messages.push("Okay, now that you have had a chance to look over the landmarks, let’s see how well you can identify them on the CT scan.");		return callbackMessages(messages, null, null, progressCallback, callback, false, "CTTech");};var doctorDialogFinished = function(progressCallback, callback){	var messages = new Array("Looks like you listened during class!", 							 "Now that you are familiar with a healthy brain, Let’s examine some common injury types as they appear on a CT image.",							 "Here is a CT scan of a patient who sustained an open or penetrating head injury from a gunshot wound to the head.",							 "The arrows are pointing to the air pockets where the bullet damaged the brain.",							 "In other cases, a traumatic brain injury results in a build-up of blood in the head called a hematoma.",							 "This high density collection of blood appears lighter gray or white on a CT scan.",							 "Here is an example of an epidural hematoma.", 							 "We identified the type of hematoma because it is lens shaped and forms between the dura mater (the tough membrane that covers the brain) and the skull.",							 "Another type of hematoma is a subdural hematoma, meaning it forms below the dura mater next to the brain.",							 "We can recognize it due to its crescent shape.",							 "Now that you are familiar with the CT imaging system, lets take a look at the patient’s scans"							 							 );	return callbackMessages(messages, null, null, progressCallback, callback, false, "CTTech");};var doctorDialogSidesWrong = function(callback){	var messages = new Array("Remember, the image you see on the scan is flipped.");	return displayMessages(messages, null, null, callback, false, "CTTech");};var doctorDialogSidesCorrect = function(callback){	var messages = new Array("Excellent, now let’s review some of the anatomical landmarks of a healthy brain.");	return displayMessages(messages, null, null, callback, false, "CTTech");};var doctorDialogReviewQuestion = function(callback){	var messages = new Array("Ok, now that you have had a chance to look over the landmarks, let’s see how well you can identify them on the CT scan.  Do you want to review one last time?");	return displayMessages(messages, null, null, callback, {'hideClose' : true}, "CTTech");};var displayQuiz = function(){	brain = new brainBase();	ct = new ctBase();	brain.x = 60;	brain.y = 180;	ct.x = 510;	ct.y = 180;		desc = new TextField();	desc.x = 50; desc.y = 353;	desc.width = 700; desc.height = 134;	desc.wordWrap = true;					var txt_fmt:TextFormat = new TextFormat();	txt_fmt.size = 24;	desc.defaultTextFormat = txt_fmt;	desc.selectable = false;		pName = new TextField();	pName.x = 310; pName.y = 290;	pName.width = 200; pName.height = 40;	pName.autoSize = TextFieldAutoSize.CENTER; 	pName.selectable = false;		var format:TextFormat = new TextFormat();	format.size = 24;	format.color = 0xFF0000;		pName.defaultTextFormat = format;											for each(var part in names){		brain[part.id].gotoAndStop(0);		part.brainBitMap = new BitmapData(brain[part.id].width, brain[part.id].height, true, 0x00000000);		part.brainBitMap.draw(brain[part.id]); 				ct[part.id+"2"].gotoAndStop(0);		part.ctBitMap = new BitmapData(ct[part.id+"2"].width,ct[part.id+"2"].height, true, 0x00000000);		part.ctBitMap.draw(ct[part.id+"2"]); 			}		stage.addChild(desc);	stage.addChild(pName);	stage.addChild(brain);	stage.addChild(ct);}var brain;var ct;var injuries = new CTScanInjuries();injuries.x = 310;injuries.y = 140;var desc;var pName;toolbox.switchMenuType(2, 1);/*var review = function(callback){	var setup = false;	var reviewMouseMove = function(event){		var updated = false;		for each(var part in names){			//hitTestPoint						var p = new Point(mouseX, mouseY);			if (part.brainBitMap.hitTest(new Point(0,0), 0xFF, brain[part.id].globalToLocal(p)) ||				part.ctBitMap.hitTest(new Point(0,0), 0xFF, ct[part.id+"2"].globalToLocal(p))){				brain[part.id].gotoAndStop(2);				ct[part.id+"2"].gotoAndStop(2);				desc.text = part.desc;				pName.text = part.name;				updated = true;			}else{				brain[part.id].gotoAndStop(1);				ct[part.id+"2"].gotoAndStop(1);				//desc.text = "";				//pName.text = "";			}			if(!updated){				desc.text = "";				pName.text = "";			}		}	};	stage.addEventListener(MouseEvent.MOUSE_MOVE, reviewMouseMove);	doctorDialogReview(function(){		stage.addEventListener(MouseEvent.CLICK, function(){			stage.removeEventListener(MouseEvent.CLICK, arguments.callee);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, reviewMouseMove);			callback();		});	});}*/var refresherQuiz = function(callback){	doctorDialogRefresherQuiz(function(current, prev){		prev--;		current--;		var update = function(spot, num){			if(spot >= 0 && spot <= 6){				brain[names[spot].id].gotoAndStop(num);				ct[names[spot].id+"2"].gotoAndStop(num);				pName.text = names[spot].name;			}else{				pName.text = "";			}		}		update(prev, 0);		update(current, 4);	}, callback);};var resetBrains = function(){	for each(var part in names){		brain[part.id].gotoAndStop(1);		ct[part.id+"2"].gotoAndStop(1);		pName.text = "";		desc.text = "";	}};var closingRemarks = function(){	cleanup();	var openHead;	var epIlus;	var epScan;	var subIlus;	var subScan;	doctorDialogFinished(function(current, prev){		//take care of removing appropriate objects		switch(prev){			case 2:case 3:				stage.removeChild(injuries);				remove(openHead);			break;			case 4:case 5:				stage.removeChild(injuries);			break;			case 6:case 7:				remove(epIlus);				remove(epScan);			break;			case 8:case 9:				remove(subIlus);				remove(subScan);			break;								}		switch(current){			case 2:case 3:				openHead = addImage('openheadwoundillustration', 150, 370);				openHead.width = 150;				openHead.height = 150;				stage.addChild(injuries);				injuries.gotoAndStop(5);			break;			case 4:case 5:				stage.addChild(injuries);				injuries.gotoAndStop(2);			break;			case 6:case 7:				epIlus = addImage('epiduralIllustration', 100, 350);				epScan = addImage('epiduralCTscan', 260, 360);			break;			case 8:case 9:				subIlus = addImage('subduralIllustration', 100, 350);				subScan = addImage('subduralScan', 260, 60);			break;		}	 }, function(){		 gotoAndStop("Scene_CTScan");	 });		}var termExplanation = function(callback){	var ctExplained;	var sliceExplained;	var scanLoc;	var leftBitmap;	var rightBitmap;	var mainMsg;	var reviewMouseMove = function(event){		var p = new Point(mouseX, mouseY);		if(leftBitmap.hitTest(new Point(0,0), 0xFF, injuries.left.globalToLocal(p))){			injuries.left.gotoAndStop(2);		}else{			injuries.left.gotoAndStop(1);		}		if(rightBitmap.hitTest(new Point(0,0), 0xFF, injuries.right.globalToLocal(p))){			injuries.right.gotoAndStop(2);		}else{			injuries.right.gotoAndStop(1);		}		//stage.removeChild(injuries);		//callback();	};		var delayTimer = null;	//flashes message and object frame for time	var flashDelay = function(obj, msg, time){		if(delayTimer){			delayTimer.stop();		}		delayTimer = timer(time, function(){			//only called if the user waits, on click msg removes itself			delayTimer = null;			if(obj){				obj.gotoAndStop(1);			}			if(msg){				msg.remove();			}		});	};		//checks to see if user clicked on a specific side of brain	var testSide = function(p, bitmap, side, delay, frame, callback){		if(bitmap.hitTest(new Point(0,0), 0xFF, side.globalToLocal(p))){			//reset view			injuries.right.gotoAndStop(1);			injuries.left.gotoAndStop(1);						mainMsg.remove();			stage.removeEventListener(MouseEvent.MOUSE_MOVE, reviewMouseMove);			var msg = callback();			flashDelay(side, msg, delay);			side.gotoAndStop(frame);		}	};		//checks to see if user clicked on a side of brain	var tryClick = function(){		var p = new Point(mouseX, mouseY);		testSide(p, rightBitmap, injuries.right, 3000, 3, function(){			return doctorDialogSidesWrong(function(){				stage.addEventListener(MouseEvent.MOUSE_MOVE, reviewMouseMove); 			}); 		});		testSide(p, leftBitmap, injuries.left, 20000, 4, function(){			return doctorDialogSidesCorrect(function(){				stage.removeEventListener(MouseEvent.CLICK, tryClick);				stage.removeChild(injuries);				callback();			}); 		});	};		mainMsg = doctorDialogIntro(function(current, prev){		//handle leaving		switch(prev){			case 1:				stage.removeChild(ctExplained);				break;			case 2:				stage.removeChild(sliceExplained);				stage.removeChild(scanLoc);				break;			case 3:				if(current !== 4){					stage.removeChild(injuries);				}			case 4:				if(current === 3){					stage.removeEventListener(MouseEvent.MOUSE_MOVE, reviewMouseMove);					stage.removeEventListener(MouseEvent.CLICK, tryClick);				}		}				//handle entering		switch(current){			case 1:				ctExplained = addImage("CTExplainGraphic", 210, 190);				ctExplained.width = 250;				ctExplained.height = 200;				stage.addChild(ctExplained);				break;			case 2:				sliceExplained = addImage("sliceExplanation", 190, 190);				stage.addChild(sliceExplained);				sliceExplained.width = 200;				sliceExplained.height = 200;				scanLoc = new CTScanLocation();				scanLoc.x = 380;				scanLoc.y = 130;				stage.addChild(scanLoc);				scanLoc.gotoAndStop(1);				break;			case 3:				stage.addChild(injuries);				injuries.gotoAndStop(1);								//TODO: take this part and integrate it with other part that's similar				injuries.left.stop();				injuries.right.stop();				leftBitmap = new BitmapData(injuries.left.width, injuries.left.height, true, 0x00000000);				leftBitmap.draw(injuries.left); 								rightBitmap = new BitmapData(injuries.right.width, injuries.right.height, true, 0x00000000);				rightBitmap.draw(injuries.right); 				break;			case 4:				stage.addEventListener(MouseEvent.MOUSE_MOVE, reviewMouseMove);				stage.addEventListener(MouseEvent.CLICK, tryClick);		}	});};var takeTest = function(callback){	var msg;	names = shuffle(names);		var myTween = createTween(brain, "alpha", None.easeInOut, 0, -1, 20, function(){		//just so it doesn't get in the way		brain.x = -800;		myTween = createTween(ct, "x", None.easeInOut, ct.x-250, -1, 50, function(){			myTween = null;  		});		pName.x += 200;	});			var reviewMouseMove = function(event){		var hit = false;		for each(var part in names){			//hitTestPoint			if(brain[part.id].currentFrame !== 3 && brain[part.id].currentFrame !== 4){				var p = new Point(mouseX, mouseY);				if (!hit&&(part.brainBitMap.hitTest(new Point(0,0), 0xFF, brain[part.id].globalToLocal(p)) ||					part.ctBitMap.hitTest(new Point(0,0), 0xFF, ct[part.id+"2"].globalToLocal(p)))){					brain[part.id].gotoAndStop(2);					ct[part.id+"2"].gotoAndStop(2);					hit = true;				}else{					brain[part.id].gotoAndStop(1);					ct[part.id+"2"].gotoAndStop(1);				}			}		}	};	stage.addEventListener(MouseEvent.MOUSE_MOVE, reviewMouseMove);	var taskMsg = new Message(stage, null, null, "Identify the "+names[0].name, false, "CTTech");	var lostTime = false;	var delayTimer = null;	var flashDelay = function(id, msg, time){		delayTimer = timer(time, function(){			delayTimer = null;			brain[id].gotoAndStop(1);			ct[id+"2"].gotoAndStop(1);			//pName.text = "";			if(msg){				//msg.remove();			}			if(names.length>0){				taskMsg = new Message(stage, null, null, "Identify the "+names[0].name, false, "CTTech");			}		});		}		stage.addEventListener(MouseEvent.CLICK, function(){		if(taskMsg){			//taskMsg.remove();		}		if(myTween !== null){			myTween.fforward();			return;		}		if(names.length === 0){			stage.removeEventListener(MouseEvent.CLICK, arguments.callee);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, reviewMouseMove);			callback();			return;		}		if(delayTimer !== null){			delayTimer.stop();			delayTimer.dispatchEvent(new TimerEvent(TimerEvent.TIMER));			delayTimer = null;			return;		}					 var hit = false;		 for each(var part in names){			//hitTestPoint			var p = new Point(mouseX, mouseY);			trace("about to check", part);			if ((part.brainBitMap.hitTest(new Point(0,0), 0xFF, brain[part.id].globalToLocal(p)) ||				part.ctBitMap.hitTest(new Point(0,0), 0xFF, ct[part.id+"2"].globalToLocal(p)))){				var msg = null;				var msgTime = 2000;				if(names[0].id===part.id){					brain[part.id].gotoAndStop(4);					ct[part.id+"2"].gotoAndStop(4);					msg = new Message(stage, null, null, part.desc, false, "CTTech");					//desc.text = part.desc;					pName.text = part.name;					lostTime = false;					msgTime = 10000;					//pop the front of the array here					names.shift();				}else{					brain[part.id].gotoAndStop(3);					ct[part.id+"2"].gotoAndStop(3);					if(!lostTime){						clock.reduceAngle(4);					};					lostTime = true;					msg = new Message(stage, null, null, "Sorry that is an incorrect match", false, "CTTech");					names = shuffle(names);				}				flashDelay(part.id, msg, msgTime);				break;			}		}				});};var cleanup = function(){	stage.removeChild(desc);	stage.removeChild(pName);	stage.removeChild(brain);	stage.removeChild(ct);}switch(timeline){	case 53:		var pbox = null;				termExplanation(function(){			var docMsg = doctorDialogAdvanceOption(function(current, prev){				if(current === 1 && pbox === null){					pbox = createPopupBox();					pbox.scanButton.addEventListener(MouseEvent.CLICK, function(){						 docMsg.remove();						 pbox.scanButton.removeEventListener(MouseEvent.CLICK, arguments.callee);						 loadImageAnimation(pbox, function(){							displayQuiz();							refresherQuiz(function(){								doctorDialogTest(function(){									resetBrains();									takeTest(closingRemarks); 								});							});						});					});				}			});		});				break;}timeline++;