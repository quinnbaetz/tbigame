import flash.display.MovieClip;import flash.geom.Point;(function(){ 	var ErrorMargin = 10//15;    var mX = 350;	var mY = 183;	var pOutline =  addImage("duraLinesRegion", mX-6, mY-7);	var pMarker =  addImage("duraLines", mX, mY);	var pMarkerLine =  addImage("duraCut", mX, mY+2);	var pScissorArm = addImage("scalpelArm", WIDTH, HEIGHT);	pMarker.alpha = 0;	pOutline.alpha = 0;	toolbox.bringForward();	createTween(pMarker, "alpha", None.easeInOut, .8, -1, 100);	var fadeLines = function(callback){		var tweens = new Array();		var waiter = null;		tweens.push(createTween(pScissorArm, "y", None.easeInOut, HEIGHT, -1, 100));		tweens.push(createTween(pScissorArm, "x", None.easeInOut, WIDTH, -1, 100));		//tweens.push(createTween(pOutline, "alpha", None.easeInOut, 0, -1, 100, function(){		tweens.push(createTween(pMarker, "alpha", None.easeInOut, 0, -1, 100, function(){			waiter.kill();			callback();		}));				waiter = waitOnUser(function(){			for(var i in tweens){				tweens[i].fforward();				tweens[i] = null;			}			tweens = null;		});			}			var sugeonDialogError = function(callback){		var messages = new Array("The dura is tough but thin, we need to carefully cut with surgical scissors to avoid damaging the brain underneath.");		var msgs = displayMessages(messages, 50, 60, callback, false, "surgeonFace");	}				var tweenX = null;	var tweenY = null;	var mousePos = {x: mouseX, y: mouseY};	var getMousePos = function(){		mousePos.x = mouseX;		mousePos.y = mouseY;	}		stage.addEventListener(MouseEvent.MOUSE_MOVE, getMousePos);	var clipHandMove = timer(25, function(){		var mousex = mousePos.x;		var mousey = mousePos.y;		if(tweenX != null){			tweenX.stop();		}		tweenX = createTween(pScissorArm, "x", None.easeInOut, mousex-5);				if(tweenY != null){			tweenY.stop();		}		tweenY = createTween(pScissorArm, "y", None.easeInOut, mousey-210);	}, 0);		var withinBounds = function(x, y){		//return pOutline.hitTestPoint(x, y, true);		var bmapData:BitmapData = new BitmapData(pOutline.width, pOutline.height, true, 0x00000000);		bmapData.draw(pOutline, new Matrix());		var point = new Point(x,y);		var returnVal:Boolean = bmapData.hitTest(new Point(0,0), 0, pOutline.globalToLocal(point));		bmapData.dispose();		return returnVal;	}	var checkDrawFunc = function(callback){			var checkPoints = new Array({x: 353, y: 254},{x: 376, y: 254},{x: 417, y: 256},{x: 445, y: 258},{x: 468, y: 260},{x: 500, y: 266},{x: 534, y: 275},{x: 447, y: 238},{x: 444, y: 212},{x: 437, y: 190},{x: 444, y: 279},{x: 439, y: 300},{x: 433, y: 322},{x: 428, y: 344})			//var misses = 0;			for(var i in checkPoints){				var point:Point = new Point(checkPoints[i].x, checkPoints[i].y);					if (!pMarkerLine.hitTestPoint(point.x, point.y, true)){					//misses++;					//if(misses>0){					//	trace("{x: "+point.x+", y: "+point.y+"},");  						return;					//}				}			}			callback();			}		var lastPt = {};	var startPt = {};	var pointTouch = new Array(false, false, false, false);		var task = 0;	var startingPt;		var userLine = new MovieClip();		userLine.graphics.beginFill(0xFF0000);	pMarkerLine.mask = userLine;			userLine.x = 0;	userLine.y = 0;		var markerDraw = timer(25, function(){		var mousex = mousePos.x;		var mousey = mousePos.y;		switch(task){			case 0:								//waiting for user to go inside lines				lastPt.x = mousex;				lastPt.y = mousey;				if(withinBounds(lastPt.x, lastPt.y)){					userLine.graphics.drawCircle(lastPt.x, lastPt.y, 7);					task = 1;					startPt.x = lastPt.x;					startPt.y = lastPt.y;				}   			break;			case 1:				if(withinBounds(mousex, mousey)){				   lastPt.x = mousex;				   lastPt.y = mousey;				   //userLine.graphics.lineTo(lastPt.x, lastPt.y);				   userLine.graphics.drawCircle(lastPt.x, lastPt.y, 7);				  				   checkDrawFunc(function(){						userLine.graphics.drawCircle(WIDTH/2, HEIGHT/2, WIDTH);						markerDraw.stop();						if(clipHandMove){							clipHandMove.stop();							trace("hand stop moving");						}						markerDraw = null;						clipHandMove = null;												tweenX.stop();						tweenY.stop();						stage.removeEventListener(MouseEvent.MOUSE_MOVE,getMousePos);						fadeLines(function(){							stage.removeChild(pOutline);							stage.removeChild(pMarker);							stage.removeChild(pMarkerLine);							stage.removeChild(pScissorArm);							lastFrame = -1;							gotoAndStop("Scene_SurgeryPatient");						}); 								 					});				 				}else{					task = -1;					//if(firstLoss){						sugeonDialogError(function(){							//The dura is tough but thin, we need to carefully cut with surgical scissors to avoid damaging the brain underneath.							clock.reduceAngle(20);							task = 0;						});					//	firstLoss = false;					//}					//userLine.graphics.clear();					/*var myStart = {x: lastPt.x, y: lastPt.y}					setTimeout(function(){						task=0;						if(startingPt === true){							startPt.x = myStart.x; 							startPt.y = myStart.y; 						}else{							endPt.x = myStart.x; 							endPt.y = myStart.y;						}					}, 300);										surgeonDialog();*/				}						break;					}			}, 0);	})();