import flash.display.MovieClip;import flash.geom.Point;(function(){ 	var ErrorMargin = 10//15;    var mX = 350;	var mY = 183;	var pOutline =  addImage("duraLinesRegion", mX-6, mY-7);	var pMarker =  addImage("duraLines", mX, mY);	var pMarkerLine =  addImage("duraCut", mX, mY+2);	var pScissorArm = new duraCutArm();		pScissorArm.x = WIDTH;	pScissorArm.y = HEIGHT;	pScissorArm.stop();	stage.addChild(pScissorArm);		pMarker.alpha = 0;	pOutline.alpha = 0;	toolbox.bringForward();	createTween(pMarker, "alpha", None.easeInOut, .8, -1, 100);	var fadeLines = function(callback){		var tweens = new Array();		var waiter = null;		tweens.push(createTween(pScissorArm, "y", None.easeInOut, HEIGHT, -1, 100));		tweens.push(createTween(pScissorArm, "x", None.easeInOut, WIDTH, -1, 100));		//tweens.push(createTween(pOutline, "alpha", None.easeInOut, 0, -1, 100, function(){		tweens.push(createTween(pMarker, "alpha", None.easeInOut, 0, -1, 100, function(){			waiter.kill();			callback();		}));				waiter = waitOnUser(function(){			for(var i in tweens){				tweens[i].fforward();				tweens[i] = null;			}			tweens = null;		});			}			/*var sugeonDialogError = function(callback){		var messages = new Array("The dura is tough but thin, we need to carefully cut with surgical scissors to avoid damaging the brain underneath.");		var msgs = displayMessages(messages, null, null, callback, false, "surgeonFace");	}*/				var tweenX = null;	var tweenY = null;		var userLine = new MovieClip();		userLine.graphics.beginFill(0xFF0000);	pMarkerLine.mask = userLine;			userLine.x = 0;	userLine.y = 0;		trace("arm1", pScissorArm.arm1);	var currentArm = pScissorArm.arm1;	var step = 1;	var deltaX = 410;	var deltaY = -100;	var circSize = 7;	var setVars = function(){		trace(step);		switch(step){			case 1:				currentArm = pScissorArm.arm1;				deltaX = 444;				deltaY = 341-269;				circSize = 15;			break;			case 2:				currentArm = pScissorArm.arm2;				deltaX =  444-262;				deltaY = 341-269+321;				circSize = 7;			break;		}	}	var getMousePos = function(){		trace(pScissorArm.currentFrame);		setVars();		trace(currentArm);		var armx = currentArm.x+deltaX;		var army = currentArm.y+deltaY;		trace(armx, army);		var lastHypot = hypot(armx-mouseX, army-mouseY);		if(lastHypot < 45){			var prev = pScissorArm.currentFrame;			pScissorArm.nextFrame();			setVars();			trace(currentArm);			if(currentArm != null){				var armx = currentArm.x+deltaX;				var army = currentArm.y+deltaY;				if(lastHypot < hypot(armx-mouseX, army-mouseY)){					pScissorArm.prevFrame();					return;				}			}			userLine.graphics.drawCircle(armx, army, circSize);			if(currentArm == null || prev === pScissorArm.currentFrame){				switch(step){					case 1:						step = 2;						stage.removeEventListener(MouseEvent.MOUSE_MOVE, getMousePos);						pScissorArm.x=45//410;						pScissorArm.y=130//-115;						tweenX = createTween(pScissorArm, "x", None.easeNone, 150, -1, 50);						tweenY = createTween(pScissorArm, "y", None.easeNone, 220, -1, 50, function(){							trace("starting clip");							stage.addEventListener(MouseEvent.MOUSE_MOVE, getMousePos);						});					break;					case 2:						stage.removeEventListener(MouseEvent.MOUSE_MOVE,getMousePos);						pScissorArm.stop();						fadeLines(function(){							remove(pMarker);							remove(pOutline);							remove(pScissorArm);							lastFrame = -1;							gotoAndStop("Scene_SurgeryPatient");						});					break;				}			}		}		}			/*{x: 353, y: 254},{x: 376, y: 254},{x: 417, y: 256},{x: 445, y: 258},{x: 468, y: 260},{x: 500, y: 266},{x: 534, y: 275},{x: 447, y: 238},{x: 444, y: 212},{x: 437, y: 190},{x: 444, y: 279},{x: 439, y: 300},{x: 433, y: 322},{x: 428, y: 344}*/	 	tweenX = createTween(pScissorArm, "x", None.easeNone, deltaX, -1, 50);	tweenY = createTween(pScissorArm, "y", None.easeNone, deltaY, -1, 50, function(){		trace("starting clip");		stage.addEventListener(MouseEvent.MOUSE_MOVE, getMousePos);	});		})();