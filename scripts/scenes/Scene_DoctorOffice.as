(function(){	function pickedEvidence(evNum) 	{		toolbox.menuBox.questions.gotoAndStop(evNum+5);	} switch(timeline){	 case 76:	 	toolbox.hidePad();		toolbox.sendBackward();	 	toolbox.switchMenuType(2, 1);				var DoctorDialog = function(callback){			displayMessages(_('next step'), null, null, callback, false);		}		var DoctorDialog1_a = function(callback){			removeQuestionListeners();			displayMessages(_("can't wait"), null, null, addQuestionListeners, false);		}		var DoctorDialog1_b = function(callback){			removeQuestionListeners();			displayMessages(_('what to do'), null, null, addQuestionListeners, false);		}		var DoctorDialog1_c = function(callback){			removeQuestionListeners();			toolbox.menuBox.questions.gotoAndStop(1);			displayMessages(_('surgery evidence'), null, null, advance, false);		}		var DoctorDialog1_d = function(callback){			removeQuestionListeners();			displayMessages(_('mri or ct'), null, null, addQuestionListeners, false);		}		var DoctorDialog1_e = function(callback){			removeQuestionListeners();			displayMessages(_('help more'), null, null, addQuestionListeners, false);		}		var advance = function(){			toolbox.showPad();			ExternalInterface.call("pickEvidence");		}		var removeQuestionListeners = function(){			toolbox.menuBox.questions.ct_question1_a.removeEventListener(MouseEvent.CLICK, DoctorDialog1_a);			toolbox.menuBox.questions.ct_question1_b.removeEventListener(MouseEvent.CLICK, DoctorDialog1_b);			toolbox.menuBox.questions.ct_question1_c.removeEventListener(MouseEvent.CLICK, DoctorDialog1_c);			toolbox.menuBox.questions.ct_question1_d.removeEventListener(MouseEvent.CLICK, DoctorDialog1_d);			toolbox.menuBox.questions.ct_question1_e.removeEventListener(MouseEvent.CLICK, DoctorDialog1_e);		}		var addQuestionListeners = function(){			toolbox.menuBox.questions.ct_question1_a.addEventListener(MouseEvent.CLICK, DoctorDialog1_a);			toolbox.menuBox.questions.ct_question1_b.addEventListener(MouseEvent.CLICK, DoctorDialog1_b);			toolbox.menuBox.questions.ct_question1_c.addEventListener(MouseEvent.CLICK, DoctorDialog1_c);			toolbox.menuBox.questions.ct_question1_d.addEventListener(MouseEvent.CLICK, DoctorDialog1_d);			toolbox.menuBox.questions.ct_question1_e.addEventListener(MouseEvent.CLICK, DoctorDialog1_e);		}		DoctorDialog(function(){			toolbox.menuBox.questions.gotoAndStop(2);			addQuestionListeners();		});		//need to remove after click		ExternalInterface.addCallback("pickedEvidence", pickedEvidence);			 break;	 case 77:	 	toolbox.hidePad();		toolbox.switchMenuType(2, 1);				var DoctorDialog2_a = function(callback){			removeQuestionListeners();			displayMessages(_('better reason'), null, null, advance, false);			toolbox.menuBox.questions.gotoAndStop(1);		}		var DoctorDialog2_b = function(callback){			removeQuestionListeners();			displayMessages(_('specific reason'), null, null, advance, false);			toolbox.menuBox.questions.gotoAndStop(1);		}		var DoctorDialog2_c = function(callback){			removeQuestionListeners();			displayMessages(_('ct is enough'), null, null, advance, false);			toolbox.menuBox.questions.gotoAndStop(1);		}				var advance = function(){			toolbox.showPad();			ExternalInterface.call("pickEvidence");		}		var removeQuestionListeners = function(){			toolbox.menuBox.questions.ct_question2_a.removeEventListener(MouseEvent.CLICK, DoctorDialog2_a);			toolbox.menuBox.questions.ct_question2_b.removeEventListener(MouseEvent.CLICK, DoctorDialog2_b);			toolbox.menuBox.questions.ct_question2_c.removeEventListener(MouseEvent.CLICK, DoctorDialog2_c);		}		var addQuestionListeners = function(){			toolbox.menuBox.questions.ct_question2_a.addEventListener(MouseEvent.CLICK, DoctorDialog2_a);			toolbox.menuBox.questions.ct_question2_b.addEventListener(MouseEvent.CLICK, DoctorDialog2_b);			toolbox.menuBox.questions.ct_question2_c.addEventListener(MouseEvent.CLICK, DoctorDialog2_c);		}		toolbox.menuBox.questions.gotoAndStop(3);		addQuestionListeners();				//need to remove after click		ExternalInterface.addCallback("pickedEvidence", pickedEvidence);			 	 break;	 case 78:	 	toolbox.hidePad();		toolbox.switchMenuType(2, 1);				var DoctorDialog3_a = function(callback){			removeQuestionListeners();			displayMessages(_('danger of nonremoval'), null, null, advance, false);			toolbox.menuBox.questions.gotoAndStop(1);		}		var DoctorDialog3_b = function(callback){			removeQuestionListeners();			displayMessages(_('why damage indicates surgery'), null, null, addQuestionListeners, false);		}				var advance = function(){			lastFrame = -1;			gotoAndStop("Scene_DoctorOffice");		}		var removeQuestionListeners = function(){			toolbox.menuBox.questions.ct_question3_a.removeEventListener(MouseEvent.CLICK, DoctorDialog3_a);			toolbox.menuBox.questions.ct_question3_b.removeEventListener(MouseEvent.CLICK, DoctorDialog3_b);		}		var addQuestionListeners = function(){			toolbox.menuBox.questions.ct_question3_a.addEventListener(MouseEvent.CLICK, DoctorDialog3_a);			toolbox.menuBox.questions.ct_question3_b.addEventListener(MouseEvent.CLICK, DoctorDialog3_b);		}		toolbox.menuBox.questions.gotoAndStop(4);		addQuestionListeners();					 break;	 case 79:	 	toolbox.hidePad();		toolbox.switchMenuType(2, 1);				var DoctorDialog4_a = function(callback){			removeQuestionListeners();			displayMessages(_('blood loss not issue'), null, null, addQuestionListeners, false);		}		var DoctorDialog4_b = function(callback){			removeQuestionListeners();			displayMessages(_('why hematomas are dangerous'), null, null, addQuestionListeners, false);		}		var DoctorDialog4_c = function(callback){			removeQuestionListeners();			displayMessages(_('pressure on brain dangerous'), null, null, advance, false);			toolbox.menuBox.questions.gotoAndStop(1);		}				var advance = function(){			lastFrame = -1;			gotoAndStop("Scene_DoctorOffice");		}		var removeQuestionListeners = function(){			toolbox.menuBox.questions.ct_question4_a.removeEventListener(MouseEvent.CLICK, DoctorDialog4_a);			toolbox.menuBox.questions.ct_question4_b.removeEventListener(MouseEvent.CLICK, DoctorDialog4_b);			toolbox.menuBox.questions.ct_question4_c.removeEventListener(MouseEvent.CLICK, DoctorDialog4_c);		}		var addQuestionListeners = function(){			toolbox.menuBox.questions.ct_question4_a.addEventListener(MouseEvent.CLICK, DoctorDialog4_a);			toolbox.menuBox.questions.ct_question4_b.addEventListener(MouseEvent.CLICK, DoctorDialog4_b);			toolbox.menuBox.questions.ct_question4_c.addEventListener(MouseEvent.CLICK, DoctorDialog4_c);		}		toolbox.menuBox.questions.gotoAndStop(5);		addQuestionListeners();					 break;	 case 80:	 	var DoctorDialog = function(callback){			displayMessages(_('surgery recomendation'), null, null, callback, false);		}		DoctorDialog(function(){			var SurgeonButton:ClickRegion = new ClickRegion(stage, 700, 0, 100, 450, function(){				fadeOut(function(){					toolbox.menuBox.questions.gotoAndStop(1);					toolbox.switchMenuType(1);					timeline = 100;					gotoAndStop("Scene_SurgeryRoom");				});			}); 		});					   break; }})();timeline++;