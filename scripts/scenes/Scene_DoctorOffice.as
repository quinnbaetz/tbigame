(function(){	function pickedEvidence(evNum) 	{		toolbox.menuBox.questions.gotoAndStop(evNum+5);	}	trace("_______",timeline); switch(timeline){	 case 76:	 	var msg;	 	toolbox.hidePad();		toolbox.sendBackward();	 	toolbox.switchMenuType(2, 1);				//create the list of dialog handlers		var messageList = {			'doctorDialog' : 'next step',			'ct_question1_a' : "can't wait",			'ct_question1_b' : 'what to do',			'ct_question1_c': function(){				if(msg){					msg.remove();				}				toggleQuestionListeners("remove");				toolbox.menuBox.questions.gotoAndStop(1);				lastFrame = -1;				gotoAndStop("Scene_DoctorOffice");			},			'ct_question1_d' : 'mri or ct',			'ct_question1_e' : 'help more'		}				//create the handlers for the buttons		for(var i in messageList){			var func;			if(typeof(messageList[i]) !== "function"){				messageList[i] = function(str){					return function(callback){						if(msg){							msg.remove();						}						msg = callbackMessages(_(str), null, null, callback, null, {'hideClose' : true, 'preventClose' : true}, false);					}				}(messageList[i]);			}								}		//add or remove handlers to buttons		var toggleQuestionListeners = function(type="add"){			for(var i in messageList){				if(typeof(toolbox.menuBox.questions[i]) !== "undefined"){					toolbox.menuBox.questions[i][type+"EventListener"](MouseEvent.CLICK, messageList[i]);				}			}		}				messageList['doctorDialog'](function(current, prev){			if(current == 2){				toolbox.menuBox.questions.gotoAndStop(2);				toggleQuestionListeners("add");			}			if(prev == 2 && current == 1){				toggleQuestionListeners("remove");				toolbox.menuBox.questions.gotoAndStop(1);			}		});								//need to remove after click		//ExternalInterface.addCallback("pickedEvidence", pickedEvidence);			 break;	 case 77:	 	 	 	var msg;				var DoctorDialog = function(progressCallback){			msg = callbackMessages(_('surgery evidence'), null, null, progressCallback, null, {'hideClose' : true, 'preventClose' : true}, false);		}						var chooseType = function(){			toolbox.menuBox.questions.gotoAndStop(6);			addTypeQuestionListeners();		}		var typeFun = function(){			removeTypeQuestionListeners();			lastFrame = -1;			gotoAndStop("Scene_DoctorOffice");		}		var locationFun = function(){			removeTypeQuestionListeners();			toolbox.menuBox.questions.gotoAndStop(3);			addQuestionListeners();					}		var removeTypeQuestionListeners = function(){			if(msg){				trace("removing msg here");				msg.remove();			}			toolbox.menuBox.questions.locationButton.removeEventListener(MouseEvent.CLICK, locationFun);			toolbox.menuBox.questions.typeButton.removeEventListener(MouseEvent.CLICK, typeFun);		}		var addTypeQuestionListeners = function(){			toolbox.menuBox.questions.locationButton.addEventListener(MouseEvent.CLICK, locationFun);			toolbox.menuBox.questions.typeButton.addEventListener(MouseEvent.CLICK, typeFun);		}								var DoctorDialog2_a = function(){			removeQuestionListeners();			msg = callbackMessages(_('better reason'), null, null, null, null, {'hideClose' : true, 'preventClose' : true}, false);		}		var DoctorDialog2_b = function(){			removeQuestionListeners();			msg = callbackMessages(_('specific reason'), null, null, null, null, {'hideClose' : true, 'preventClose' : true}, false);		}		var DoctorDialog2_c = function(){			removeQuestionListeners();			msg = callbackMessages(_('ct is enough'), null, null, null, null, {'hideClose' : true, 'preventClose' : true}, false);		}				var removeQuestionListeners = function(){			toolbox.menuBox.questions.ct_question2_a.removeEventListener(MouseEvent.CLICK, DoctorDialog2_a);			toolbox.menuBox.questions.ct_question2_b.removeEventListener(MouseEvent.CLICK, DoctorDialog2_b);			toolbox.menuBox.questions.ct_question2_c.removeEventListener(MouseEvent.CLICK, DoctorDialog2_c);			chooseType();		}		var addQuestionListeners = function(){			toolbox.menuBox.questions.ct_question2_a.addEventListener(MouseEvent.CLICK, DoctorDialog2_a);			toolbox.menuBox.questions.ct_question2_b.addEventListener(MouseEvent.CLICK, DoctorDialog2_b);			toolbox.menuBox.questions.ct_question2_c.addEventListener(MouseEvent.CLICK, DoctorDialog2_c);		}				toolbox.switchMenuType(2, 1);		toolbox.hidePad();	 	DoctorDialog();		chooseType();		//need to remove after click		//ExternalInterface.addCallback("pickedEvidence", pickedEvidence);			 	 break;	 case 78:	 	toolbox.hidePad();		toolbox.switchMenuType(2, 1);		var msg;		var DoctorDialog3_a = function(callback){			removeQuestionListeners();			toolbox.menuBox.questions.gotoAndStop(1);			lastFrame = -1;			gotoAndStop("Scene_DoctorOffice");					}		var DoctorDialog3_b = function(callback){			if(msg){				msg.remove();			}			msg = callbackMessages(_('why damage indicates surgery'), null, null, null, null, {'hideClose' : true, 'preventClose' : true}, false);		}				var removeQuestionListeners = function(){			if(msg){				msg.remove();			}			toolbox.menuBox.questions.ct_question3_a.removeEventListener(MouseEvent.CLICK, DoctorDialog3_a);			toolbox.menuBox.questions.ct_question3_b.removeEventListener(MouseEvent.CLICK, DoctorDialog3_b);		}		var addQuestionListeners = function(){			toolbox.menuBox.questions.ct_question3_a.addEventListener(MouseEvent.CLICK, DoctorDialog3_a);			toolbox.menuBox.questions.ct_question3_b.addEventListener(MouseEvent.CLICK, DoctorDialog3_b);		}		toolbox.menuBox.questions.gotoAndStop(4);		addQuestionListeners();					 break;	 case 79:	 	toolbox.hidePad();		toolbox.switchMenuType(2, 1);		var msg;				var DoctorDialog = function(){			if(msg){				msg.remove();			}			msg = callbackMessages(_('danger of nonremoval'), null, null, null, null, {'hideClose' : true, 'preventClose' : true}, false);		}				var DoctorDialog4_a = function(){			if(msg){				msg.remove();			}			msg =  callbackMessages(_('blood loss not issue'), null, null, null, null, {'hideClose' : true, 'preventClose' : true}, false);		}		var DoctorDialog4_b = function(){			if(msg){				msg.remove();			}			msg =  callbackMessages(_('why hematomas are dangerous'), null, null, null, null, {'hideClose' : true, 'preventClose' : true}, false);		}		var DoctorDialog4_c = function(callback){			if(msg){				msg.remove();			}			toolbox.menuBox.questions.ct_question4_a.removeEventListener(MouseEvent.CLICK, DoctorDialog4_a);			toolbox.menuBox.questions.ct_question4_b.removeEventListener(MouseEvent.CLICK, DoctorDialog4_b);			toolbox.menuBox.questions.ct_question4_c.removeEventListener(MouseEvent.CLICK, DoctorDialog4_c);			lastFrame = -1;			gotoAndStop("Scene_DoctorOffice");			toolbox.menuBox.questions.gotoAndStop(1);		}		var addQuestionListeners = function(){			toolbox.menuBox.questions.ct_question4_a.addEventListener(MouseEvent.CLICK, DoctorDialog4_a);			toolbox.menuBox.questions.ct_question4_b.addEventListener(MouseEvent.CLICK, DoctorDialog4_b);			toolbox.menuBox.questions.ct_question4_c.addEventListener(MouseEvent.CLICK, DoctorDialog4_c);		}		toolbox.menuBox.questions.gotoAndStop(5);		addQuestionListeners();		DoctorDialog();			 break;	 case 80:	 	var DoctorDialog = function(callbacks){			return callbackMessages(_('surgery recomendation'), null, null, callbacks, null, {'hideClose' : true, 'preventClose' : true}, false);		}		var SurgeonButton:ClickRegion;		var msg = DoctorDialog(function(current, prev){			if(current === 3 && typeof(SurgeonButton) === "undefined"){				SurgeonButton = new ClickRegion(stage, 700, 0, 100, 450, function(){					msg.remove();					SurgeonButton.remove();					fadeOut(function(){						toolbox.menuBox.questions.gotoAndStop(1);						toolbox.switchMenuType(1);						timeline = 100;						gotoAndStop("Scene_SurgeryRoom");					});				}, {"showOutline" : true}); 			}		});					   break; }})();