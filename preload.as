import flash.external.ExternalInterface;import flash.system.Security;import flash.events.Event;Security.allowDomain("*");// Set up the loader objectvar request:URLRequest = new URLRequest("tbigame.swf?cachebuster=" + new Date().getTime()); // File path is relative to this preloadervar myLoader:Loader = new Loader();var urlLoader:URLLoader = new URLLoader();var menuScreen;var scene;var time;myLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, firstLoad);urlLoader.addEventListener(ProgressEvent.PROGRESS, loadProgress);urlLoader.addEventListener(Event.COMPLETE, urlLoaderComplete);function urlLoaderComplete(e){	myLoader.loadBytes(urlLoader.data);}// Update the percentage displayfunction loadProgress(event:ProgressEvent):void {    var percentLoaded:Number = event.bytesLoaded / event.bytesTotal;    percentLoaded = Math.round(percentLoaded * 100);		this.percentLoaded.text = String(uint(percentLoaded)) + "%";	}function laterLoads(event:Event):void{	var child = myLoader.content as Object;	child.fTrace("loading", that.scene, that.time);	try{		child.subJumpToScene(that.scene, that.time);	}catch(e){		child.fTrace("The error is ---", e);	}}// Load complete, hide the animating graphic and textfunction firstLoad(event:Event):void {	var child = myLoader.content as Object;	child.fTrace("initial load comp", that.scene, that.time);	    this.rotatingOrb.visible = false;	this.percentLoaded.visible = false;		//menuScreen = new MenuScreen();	myLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, firstLoad);	myLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, laterLoads);	/*	menuScreen.newGame.addEventListener(MouseEvent.CLICK, function(){				scene = 11;		time = 50;		restart();			});*///	menuScreen.returnButton.addEventListener(MouseEvent.CLICK, menuToggle);	}urlLoader.dataFormat = URLLoaderDataFormat.BINARY;urlLoader.load(request);this.addChild(myLoader);var that = this;//stage.addEventListener(MouseEvent.CLICK, function(){//	jumpToScene(14, 75);//});ExternalInterface.addCallback("restart", restart);function restart() {	var child = myLoader.content as Object;	child.fTrace("restarting (AS)");	try{		child.subReset();	}catch(e){		child.fTrace(e);	}	child.fTrace("finished reset (AS)");	try{		myLoader.unloadAndStop(true);	//setTimeout(function(){		myLoader.loadBytes(urlLoader.data);	//}, 500);	}catch(e){		child.fTrace(e);	}}ExternalInterface.addCallback("jumpToScene", jumpToScene);function jumpToScene(scene, time, toRestart=true) {	var child = myLoader.content as Object;	child.fTrace("jumping to scene (AS3)");	that.scene = scene;	that.time = time;	if(toRestart){		restart();	}else{		laterLoads(null);	}		//gotoAndStop(scene);}